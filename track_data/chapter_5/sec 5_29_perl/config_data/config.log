First let's make sure your kit is complete.  Checking...
Would you like to see the instructions? [n]  
Locating common programs...
Checking compatibility between /tools/bin/echo and builtin echo (if any)...
Symbolic links are supported.
Checking how to test for symbolic links...
You can test for symbolic links with 'test -h'.
Good, your tr supports [:lower:] and [:upper:] to convert case.
Using [:upper:] and [:lower:] to convert case.
I see a config.sh file.  Shall I use it to set the defaults? [y]  
Fetching default answers from your old config.sh file...
Operating system name? [linux]  
Operating system version? [3.11.0-26-generic]  
Installation prefix to use? (~name ok) [/tools]  
AFS does not seem to be running...
What installation prefix should I use for installing files? (~name ok)
[/tools]  
Getting the current patchlevel...
Build a threading Perl? [n]  
Build Perl for multiplicity? [n]  
Use which C compiler? [cc]  
Checking for GNU cc in disguise and/or its version number...
Now, how can we feed standard input to your C preprocessor...
Directories to use for library searches? [/tools/lib]  
What is the file extension used for shared libraries? [so]  
Build Perl for SOCKS? [n]  
Try to use long doubles if available? [n]  
Checking for optional libraries...
What libraries to use? [-lnsl -ldl -lm -lcrypt -lutil -lc]  
What optimizer/debugger flag should be used? [-O2]  
Any additional cc flags?
[-fno-strict-aliasing -pipe -fstack-protector -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64]  
Let me guess what the preprocessor flags are...
Any additional ld flags (NOT including libraries)? [ -fstack-protector]  
Checking your choice of C compiler and flags for coherency...
Computing filename position in cpp output for #include directives...
<stdlib.h> found.
Checking to see if you have long long...
<inttypes.h> found.
Checking to see if you have int64_t...
Checking which 64-bit integer type we could use...
We could use 'long long' for 64-bit integers.
Try to use 64-bit integers, if available? [n]  
Try to use maximal 64-bit support, if available? [n]  
Checking to see if you have long double...
What is your architecture name [i686-linux]  
Add the Perl API version to your archname? [n]  
Pathname where the public executables will reside? (~name ok) [/tools/bin]  
Use relocatable @INC? [n]  
Pathname where the private library files will reside? (~name ok)
[/tools/lib/perl5/5.18.2]  
Where do you want to put the public architecture-dependent libraries? (~name ok)
[/tools/lib/perl5/5.18.2/i686-linux]  
Other username to test security of setuid scripts with? [none]  
Well, the previous value is *not* secure.
Does your kernel have *secure* setuid scripts? [n]  
Installation prefix to use for add-on modules and utilities? (~name ok)
[/tools]  
Pathname for the site-specific library files? (~name ok)
[/tools/lib/perl5/site_perl/5.18.2]  
List of earlier versions to include in @INC? [none]  
<malloc/malloc.h> NOT found.
<malloc.h> found.
Checking to see how well your C compiler groks the void type...
Do you wish to wrap malloc calls to protect against potential overflows? [y]  
Do you wish to attempt to use the malloc that comes with perl5? [n]  
Your system wants malloc to return 'void *', it would seem.
Your system uses void free(), it would seem.
Pathname for the site-specific architecture-dependent library files? (~name ok)
[/tools/lib/perl5/site_perl/5.18.2/i686-linux]  
Do you want to configure vendor-specific add-on directories? [n]  
Colon-separated list of additional directories for perl to search? [none]  
Checking out function prototypes...
Support DTrace if available? [y]  
*** WHOA THERE!!! ***
    The previous value for $usedtrace on this machine was "undef"!
    Keep the previous value? [y]  
Install any extra modules (y or n)? [n]  
Directory for the main Perl5 html pages? (~name ok) [none]  
Directory for the Perl5 module html pages? (~name ok) [ ]  
Do you want to install perl as /usr/bin/perl? [n]  
Checking for GNU C Library...
Shall I use /tools/bin/nm to extract C symbols from the libraries? [n]  
<dld.h> NOT found.
Checking for C++...
dlopen() found.
<unistd.h> found.
Do you wish to use dynamic loading? [y]  
Source file to use for dynamic loading [ext/DynaLoader/dl_dlopen.xs]  
Any special flags to pass to cc -c to compile shared library modules?
[-fPIC]  
What command should be used to create dynamic libraries? [cc]  
Any special flags to pass to cc to create a dynamically loaded library?
[-shared -O2 -fstack-protector]  
Any special flags to pass to cc to use dynamic linking? [-Wl,-E]  
ld supports scripting
Build a shared libperl.so (y/n) [n]  
System manual is in /usr/share/man/man1.
Where do the main Perl5 manual pages (source) go? (~name ok)
[/tools/share/man/man1]  
What suffix should be used for the main Perl5 man pages? [1]  
You can have filenames longer than 14 characters.
Where do the perl5 library man pages (source) go? (~name ok)
[/tools/share/man/man3]  
What suffix should be used for the perl5 library man pages? [3]  
Figuring out host name...
Your host name appears to be "lfs". Right? [y]  
What is your domain name? [.(none)]  
What is your e-mail address? [lfs@lfs.(none)]  
Perl administrator e-mail address [lfs@lfs.(none)]  
Do you want to install only the version-specific parts of perl? [n]  
Where do you keep publicly executable scripts? (~name ok) [/tools/bin]  
Pathname where the add-on public executables should be installed? (~name ok)
[/tools/bin]  
Pathname where the site-specific html pages should be installed? (~name ok)
[none]  
Pathname where the site-specific library html pages should be installed? (~name ok)
[none]  
Pathname where the site-specific manual pages should be installed? (~name ok)
[/tools/share/man/man1]  
Pathname where the site-specific library manual pages should be installed? (~name ok)
[/tools/share/man/man3]  
Pathname where add-on public executable scripts should be installed? (~name ok)
[/tools/bin]  
Use the "fast stdio" if available? [n]  
Checking to see how big your file offsets are...
Checking the size of fpos_t...
Try to understand large files, if available? [y]  
Using <string.h> instead of <strings.h>.
qgcvt() found.
Checking how to print long doubles...
fwalk() NOT found.
access() found.
<sys/file.h> defines the *_OK access constants.
accessx() NOT found.
aintl() NOT found.
alarm() found.
ctime64() NOT found.
localtime64() NOT found.
gmtime64() NOT found.
mktime64() NOT found.
difftime64() NOT found.
asctime64() NOT found.
<pthread.h> found.
<sys/types.h> found.
<sys/select.h> found.
Checking to see if your struct tm has tm_zone field...
Checking to see if your struct tm has tm_gmtoff field...
asctime_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_asctime_r on this machine was "undef"!
    Keep the previous value? [y]  
atolf() NOT found.
atoll() found.
bcmp() found.
bcopy() found.
getpgrp() found.
You have to use getpgrp() instead of getpgrp(pid).
setpgrp() found.
You have to use setpgrp() instead of setpgrp(pid,pgrp).
bzero() found.
<stdarg.h> found.
<varargs.h> found.
We'll include <stdarg.h> to get va_dcl definition.
You have <stdarg.h> and <stdlib.h>, so checking for C99 variadic macros.
You have C99 variadic macros.
You have void (*signal())().
Checking whether your C compiler can cast large floats to int32.
Checking whether your C compiler can cast negative float to unsigned.
vprintf() found.
Your vsprintf() returns (int).
chown() found.
chroot() found.
chsize() NOT found.
class() NOT found.
clearenv() found.
Hmm... Looks like you have Berkeley networking support.
socketpair() found.
Checking the availability sa_len in the sock struct ...
Checking the availability struct sockaddr_in6 ...
Checking the availability sin6_scope_id in struct sockaddr_in6 ...
Checking the availability struct ip_mreq ...
Checking the availability struct ip_mreq_source ...
Checking the availability struct ipv6_mreq ...
Checking the availability struct ipv6_mreq_source ...
Checking the availability of certain socket constants...
<sys/uio.h> found.
Checking to see if your system supports struct cmsghdr...
Checking to see if your C compiler knows about "const"...
copysignl() found.
crypt() found.
<crypt.h> found.
crypt_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_crypt_r on this machine was "undef"!
    Keep the previous value? [y]  
ctermid() found.
ctermid_r() NOT found.
ctime_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_ctime_r on this machine was "undef"!
    Keep the previous value? [y]  
cuserid() found.
<limits.h> found.
<float.h> found.
DBL_DIG found.
dbmclose() NOT found.
difftime() found.
<dirent.h> found.
Your directory entries are struct dirent.
Your directory entry does not know about the d_namlen field.
Checking to see if DIR has a dd_fd member variable
<sys/dir.h> found.
<sys/ndir.h> NOT found.
dirfd() found.
dlerror() found.
<dlfcn.h> found.
What is the extension of dynamically loaded modules [so]  
Checking whether your dlsym() needs a leading underscore ...
dlsym doesn't need a leading underscore.
drand48_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_drand48_r on this machine was "undef"!
    Keep the previous value? [y]  
dup2() found.
eaccess() found.
endgrent() found.
<grp.h> found.
endgrent_r() NOT found.
endhostent() found.
<netdb.h> found.
endhostent_r() NOT found.
endnetent() found.
endnetent_r() NOT found.
endprotoent() found.
endprotoent_r() NOT found.
endpwent() found.
<pwd.h> found.
endpwent_r() NOT found.
endservent() found.
endservent_r() NOT found.
<sys/file.h> defines the O_* constants...
and you have the 3 argument form of open().
<sys/file.h> found.
We'll be including <sys/file.h>.
<fcntl.h> found.
We don't need to include <fcntl.h> if we include <sys/file.h>.
fork() found.
pipe() found.
Figuring out the flag used by open() for non-blocking I/O...
Let's see what value errno gets from read() on a O_NONBLOCK file...
Checking how std your stdio is...
Checking to see what happens if we set the stdio ptr...
Increasing ptr in your stdio decreases cnt by the same amount.  Good.
You seem to have 'fast stdio' to directly manipulate the stdio buffers.
fchdir() found.
fchmod() found.
fchown() found.
fcntl() found.
Well, your system has some sort of fd_set available...
and you have the normal fd_set macros.
fgetpos() found.
finite() found.
finitel() found.
flock() found.
fp_class() NOT found.
pathconf() found.
fpathconf() found.
fpclass() NOT found.
fpclassify() NOT found.
fpclassl() NOT found.
Checking to see if you have fpos64_t...
frexpl() found.
<sys/param.h> found.
<sys/mount.h> found.
Checking to see if your system supports struct fs_data...
fseeko() found.
fsetpos() found.
fstatfs() found.
statvfs() found.
fstatvfs() found.
fsync() found.
ftello() found.
Checking if you have a working futimes()
Yes, you have
<ndbm.h> NOT found.
<gdbm/ndbm.h> NOT found.
<gdbm-ndbm.h> NOT found.
getaddrinfo() found.
getcwd() found.
getespwnam() NOT found.
getfsstat() NOT found.
getgrent() found.
getgrent_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getgrent_r on this machine was "undef"!
    Keep the previous value? [y]  
getgrgid_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getgrgid_r on this machine was "undef"!
    Keep the previous value? [y]  
getgrnam_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getgrnam_r on this machine was "undef"!
    Keep the previous value? [y]  
gethostbyaddr() found.
gethostbyname() found.
gethostent() found.
gethostname() found.
uname() found.
Shall I ignore gethostname() from now on? [n]  
gethostbyaddr_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_gethostbyaddr_r on this machine was "undef"!
    Keep the previous value? [y]  
gethostbyname_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_gethostbyname_r on this machine was "undef"!
    Keep the previous value? [y]  
gethostent_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_gethostent_r on this machine was "undef"!
    Keep the previous value? [y]  
getitimer() found.
getlogin() found.
getlogin_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getlogin_r on this machine was "undef"!
    Keep the previous value? [y]  
getmnt() NOT found.
getmntent() found.
getnameinfo() found.
getnetbyaddr() found.
getnetbyname() found.
getnetent() found.
getnetbyaddr_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getnetbyaddr_r on this machine was "undef"!
    Keep the previous value? [y]  
getnetbyname_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getnetbyname_r on this machine was "undef"!
    Keep the previous value? [y]  
getnetent_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getnetent_r on this machine was "undef"!
    Keep the previous value? [y]  
getpagesize() found.
getprotobyname() found.
getprotobynumber() found.
getprotoent() found.
getpgid() found.
getpgrp2() NOT found.
getppid() found.
getpriority() found.
getprotobyname_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getprotobyname_r on this machine was "undef"!
    Keep the previous value? [y]  
getprotobynumber_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getprotobynumber_r on this machine was "undef"!
    Keep the previous value? [y]  
getprotoent_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getprotoent_r on this machine was "undef"!
    Keep the previous value? [y]  
getprpwnam() NOT found.
getpwent() found.
getpwent_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getpwent_r on this machine was "undef"!
    Keep the previous value? [y]  
getpwnam_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getpwnam_r on this machine was "undef"!
    Keep the previous value? [y]  
getpwuid_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getpwuid_r on this machine was "undef"!
    Keep the previous value? [y]  
getservbyname() found.
getservbyport() found.
getservent() found.
getservbyname_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getservbyname_r on this machine was "undef"!
    Keep the previous value? [y]  
getservbyport_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getservbyport_r on this machine was "undef"!
    Keep the previous value? [y]  
getservent_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getservent_r on this machine was "undef"!
    Keep the previous value? [y]  
getspnam() found.
<shadow.h> found.
getspnam_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_getspnam_r on this machine was "undef"!
    Keep the previous value? [y]  
gettimeofday() found.
gmtime_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_gmtime_r on this machine was "undef"!
    Keep the previous value? [y]  
hasmntopt() found.
<netinet/in.h> found.
<arpa/inet.h> found.
htonl() found.
ilogbl() found.
strchr() found.
inet_aton() found.
inet_ntop() found.
inet_pton() found.
isascii() found.
isblank() found.
isfinite() NOT found.
isinf() found.
isnan() found.
isnanl() found.
killpg() found.
lchown() found.
LDBL_DIG found.
<math.h> found.
Checking to see if your libm supports _LIB_VERSION...
Yes, it does (2)
link() found.
localtime_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_localtime_r on this machine was "undef"!
    Keep the previous value? [y]  
localeconv() found.
lockf() found.
lstat() found.
madvise() found.
malloc_size() NOT found.
malloc_good_size() NOT found.
mblen() found.
mbstowcs() found.
mbtowc() found.
memchr() found.
memcmp() found.
memcpy() found.
memmove() found.
memset() found.
mkdir() found.
mkdtemp() found.
mkfifo() found.
mkstemp() found.
mkstemps() found.
mktime() found.
<sys/mman.h> found.
mmap() found.
and it returns (void *).
sqrtl() found.
scalbnl() found.
modfl() found.
Your modfl() seems okay for large values.
mprotect() found.
msgctl() found.
msgget() found.
msgsnd() found.
msgrcv() found.
You have the full msg*(2) library.
Checking to see if your system supports struct msghdr...
msync() found.
munmap() found.
nice() found.
<langinfo.h> found.
nl_langinfo() found.
Checking to see if your C compiler knows about "volatile"...
Choosing the C types to be used for Perl's internal types...
Checking how many bits of your UVs your NVs can preserve...
Checking to find the largest integer value your NVs can hold...
The largest integer your NVs can preserve is equal to 256.0*256.0*256.0*256.0*256.0*256.0*2.0*2.0*2.0*2.0*2.0
Checking whether NV 0.0 is all bits zero in memory...
0.0 is represented as all bits zero in memory
Checking to see if you have off64_t...
pause() found.
poll() found.
prctl() found.
readlink() found.
vfork() found.
Do you still want to use vfork()? [n]  
pthread_attr_setscope() found.
random_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_random_r on this machine was "undef"!
    Keep the previous value? [y]  
readdir() found.
seekdir() found.
telldir() found.
rewinddir() found.
readdir64_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_readdir64_r on this machine was "undef"!
    Keep the previous value? [y]  
readdir_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_readdir_r on this machine was "undef"!
    Keep the previous value? [y]  
readv() found.
recvmsg() found.
rename() found.
rmdir() found.
<memory.h> found.
Checking if your memcmp() can compare relative magnitude...
select() found.
semctl() found.
semget() found.
semop() found.
You have the full sem*(2) library.
You do not have union semun in <sys/sem.h>.
You can use union semun for semctl IPC_STAT.
You can also use struct semid_ds* for semctl IPC_STAT.
sendmsg() found.
setegid() found.
seteuid() found.
setgrent() found.
setgrent_r() NOT found.
sethostent() found.
sethostent_r() NOT found.
setitimer() found.
setlinebuf() found.
setlocale() found.
<locale.h> found.
setlocale_r() NOT found.
setnetent() found.
setnetent_r() NOT found.
setprotoent() found.
setpgid() found.
setpgrp2() NOT found.
setpriority() found.
setproctitle() NOT found.
setprotoent_r() NOT found.
setpwent() found.
setpwent_r() NOT found.
setregid() found.
setresgid() found.
setreuid() found.
setresuid() found.
setrgid() NOT found.
setruid() NOT found.
setservent() found.
setservent_r() NOT found.
setsid() found.
setvbuf() found.
<sfio.h> NOT found.
shmctl() found.
shmget() found.
shmat() found.
and it returns (void *).
shmdt() found.
You have the full shm*(2) library.
sigaction() found.
<sunmath.h> NOT found.
Checking to see if you have signbit() available to work on double... Yes.
sigprocmask() found.
POSIX sigsetjmp found.
snprintf() found.
vsnprintf() found.
sockatmark() found.
socks5_init() NOT found.
Checking whether sprintf returns the length of the string...
sprintf returns the length of the string (as ANSI says it should)
srand48_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_srand48_r on this machine was "undef"!
    Keep the previous value? [y]  
srandom_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_srandom_r on this machine was "undef"!
    Keep the previous value? [y]  
<sys/stat.h> found.
Checking to see if your struct stat has st_blocks field...
<sys/vfs.h> found.
<sys/statfs.h> found.
Checking to see if your system supports struct statfs...
Checking to see if your struct statfs has f_flags field...
Checking how to access stdio streams by file descriptor number...
I can't figure out how to access stdio streams by file descriptor number.
strcoll() found.
Checking to see if your C compiler can copy structs...
strerror_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_strerror_r on this machine was "undef"!
    Keep the previous value? [y]  
strftime() found.
strlcat() NOT found.
strlcpy() NOT found.
strtod() found.
strtol() found.
strtold() found.
strtoll() found.
strtoq() found.
strtoul() found.
strtoull() found.
strtouq() found.
strxfrm() found.
symlink() found.
syscall() found.
sysconf() found.
system() found.
tcgetpgrp() found.
tcsetpgrp() found.
timegm() found.
<sys/times.h> found.
times() found.
tmpnam_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_tmpnam_r on this machine was "undef"!
    Keep the previous value? [y]  
truncate() found.
ttyname_r() found.
*** WHOA THERE!!! ***
    The previous value for $d_ttyname_r on this machine was "undef"!
    Keep the previous value? [y]  
tzname[] found.
ualarm() found.
umask() found.
unordered() NOT found.
unsetenv() found.
usleep() found.
ustat() found.
closedir() found.
Checking whether closedir() returns a status...
wait4() found.
waitpid() found.
wcstombs() found.
wctomb() found.
writev() found.
Doubles must be aligned on a how-many-byte boundary? [4]  
Determining whether or not we are on an EBCDIC system...
Nope, no EBCDIC, probably ASCII or some ISO Latin. Or UTF-8.
What is the length of a character (in bits)? [8]  
Checking to see how your cpp does stuff like concatenate tokens...
Oh!  Smells like ANSI's been here.
<db.h> NOT found.
Looking for a random number function...
Use which function to generate random numbers? [drand48]  
Checking how to flush all pending stdio output...
Checking the size of gid_t...
Checking the sign of gid_t...
Checking how to print 64-bit integers...
Checking the format strings to be used for Perl's internal types...
Checking the format string to be used for gids...
getgroups() found.
setgroups() found.
What type pointer is the second argument to getgroups() and setgroups()?
[gid_t]  
Build Perl with MAD? [n]  
Checking if your /tools/bin/make program sets $(MAKE)...
It seems that you don't need va_copy().
What pager is used on your system? [/bin/less -R]  
Checking how to generate random libraries on your machine...
<values.h> found.
Generating a list of signal names and numbers...
Checking the size of size_t...
Checking to see if you have socklen_t...
<socks.h> NOT found.
I'll be using ssize_t for functions returning a byte count.
Checking the size of st_ino...
Checking the sign of st_ino...
Your stdio uses signed chars.
Checking the size of uid_t...
Checking the sign of uid_t...
Checking the format string to be used for uids...
Determining whether we can use sysctl with KERN_PROC_PATHNAME to find executing program...
I'm unable to compile the test program.
I'll assume no sysctl with KERN_PROC_PATHNAME here.
Determining whether we can use _NSGetExecutablePath to find executing program...
I'm unable to compile the test program.
I'll assume no _NSGetExecutablePath here.
It appears we'll be able to prototype varargs functions.
Which compiler compiler (yacc or bison -y) shall I use? [yacc]  
<assert.h> found.
<fp.h> NOT found.
<fp_class.h> NOT found.
<gdbm.h> NOT found.
<libutil.h> NOT found.
<mntent.h> found.
<net/errno.h> NOT found.
<netinet/tcp.h> found.
<poll.h> found.
<prot.h> NOT found.
Guessing which symbols your C compiler and preprocessor define...
tcsetattr() found.
You have POSIX termios.h... good!
<stdbool.h> found.
<stddef.h> found.
<sys/access.h> NOT found.
<sys/filio.h> NOT found.
<sys/ioctl.h> found.
<syslog.h> found.
<sys/mode.h> NOT found.
<sys/poll.h> found.
<sys/resource.h> found.
<sys/security.h> NOT found.
<sys/statvfs.h> found.
<sys/un.h> found.
<sys/utsname.h> found.
<sys/wait.h> found.
<ustat.h> found.
<utime.h> found.
Looking for extensions...
What extensions do you wish to load dynamically?
[B Compress/Raw/Bzip2 Compress/Raw/Zlib Cwd Data/Dumper Devel/PPPort Devel/Peek Digest/MD5 Digest/SHA Encode Fcntl File/DosGlob File/Glob Filter/Util/Call Hash/Util Hash/Util/FieldHash I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 Math/BigInt/FastCalc Opcode POSIX PerlIO/encoding PerlIO/mmap PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Text/Soundex Tie/Hash/NamedCapture Time/HiRes Time/Piece Unicode/Collate Unicode/Normalize XS/APItest XS/Typemap arybase attributes mro re threads threads/shared]  
What extensions do you wish to load statically? [ ]  
Stripping down executable paths...
Creating config.sh...
Doing variable substitutions on .SH files...
Extracting cflags (with variable substitutions)
Extracting config.h (with variable substitutions)
Extracting makedepend (with variable substitutions)
Extracting Makefile (with variable substitutions)
Extracting myconfig (with variable substitutions)
Extracting pod/Makefile (with variable substitutions)
Extracting Policy.sh (with variable substitutions)
Extracting runtests (with variable substitutions)
Extracting utils/Makefile (with variable substitutions)
Extracting x2p/cflags (with variable substitutions)
Extracting x2p/Makefile (with variable substitutions)
Run make depend now? [y]  
sh ./makedepend MAKE=make
make[1]: Entering directory '/mnt/lfs/sources/perl-5.18.2'
echo av.c scope.c op.c doop.c doio.c dump.c gv.c hv.c mg.c reentr.c mro.c perl.c perly.c pp.c pp_hot.c pp_ctl.c pp_sys.c regcomp.c regexec.c utf8.c sv.c taint.c toke.c util.c deb.c run.c universal.c pad.c globals.c keywords.c perlio.c perlapi.c numeric.c mathoms.c locale.c pp_pack.c pp_sort.c   miniperlmain.c opmini.c perlmini.c | tr ' ' '\n' >.clist
make[1]: Leaving directory '/mnt/lfs/sources/perl-5.18.2'
Finding dependencies for av.o.
Finding dependencies for scope.o.
Finding dependencies for op.o.
Finding dependencies for doop.o.
Finding dependencies for doio.o.
Finding dependencies for dump.o.
Finding dependencies for gv.o.
Finding dependencies for hv.o.
Finding dependencies for mg.o.
Finding dependencies for reentr.o.
Finding dependencies for mro.o.
Finding dependencies for perl.o.
Finding dependencies for perly.o.
Finding dependencies for pp.o.
Finding dependencies for pp_hot.o.
Finding dependencies for pp_ctl.o.
Finding dependencies for pp_sys.o.
Finding dependencies for regcomp.o.
Finding dependencies for regexec.o.
Finding dependencies for utf8.o.
Finding dependencies for sv.o.
Finding dependencies for taint.o.
Finding dependencies for toke.o.
Finding dependencies for util.o.
Finding dependencies for deb.o.
Finding dependencies for run.o.
Finding dependencies for universal.o.
Finding dependencies for pad.o.
Finding dependencies for globals.o.
Finding dependencies for keywords.o.
Finding dependencies for perlio.o.
Finding dependencies for perlapi.o.
Finding dependencies for numeric.o.
Finding dependencies for mathoms.o.
Finding dependencies for locale.o.
Finding dependencies for pp_pack.o.
Finding dependencies for pp_sort.o.
Finding dependencies for miniperlmain.o.
Finding dependencies for opmini.o.
Finding dependencies for perlmini.o.
make[1]: Entering directory '/mnt/lfs/sources/perl-5.18.2'
echo Makefile.SH cflags.SH config_h.SH makedepend.SH myconfig.SH pod/Makefile.SH | tr ' ' '\n' >.shlist
make[1]: Leaving directory '/mnt/lfs/sources/perl-5.18.2'
Updating makefile...
cd x2p; make depend
make[1]: Entering directory '/mnt/lfs/sources/perl-5.18.2/x2p'
sh ../makedepend MAKE=make
make[2]: Entering directory '/mnt/lfs/sources/perl-5.18.2/x2p'
echo hash.c str.c util.c walk.c | tr ' ' '\n' >.clist
make[2]: Leaving directory '/mnt/lfs/sources/perl-5.18.2/x2p'
Finding dependencies for hash.o.
Finding dependencies for str.o.
Finding dependencies for util.o.
Finding dependencies for walk.o.
make[2]: Entering directory '/mnt/lfs/sources/perl-5.18.2/x2p'
echo Makefile.SH cflags.SH | tr ' ' '\n' >.shlist
make[2]: Leaving directory '/mnt/lfs/sources/perl-5.18.2/x2p'
Updating makefile...
make[1]: Leaving directory '/mnt/lfs/sources/perl-5.18.2/x2p'
Now you must run 'make'.

If you compile perl5 on a different machine or from a different object
directory, copy the Policy.sh file from this object directory to the
new one before you run Configure -- this will help you with most of
the policy defaults.

